从变量的作用域的角度来观察，变量可以分为全局变量和局部变量。
从变量存在的时间（即生存期）来看，变量的储存有两种不同的方式：静态储存方式和动态储存方式
）静态储存方式是只在程序运行期间由系统分配固定的储存空间的方式。
）动态储存方式则是在程序运行期间根据需要进动态的储存空间分配的方式。

内存中供用户使用的内存空间分为三部分
（１）程序区
（２）静态储存区
存放全局变量和用static声明的局部变量。
（３）动态储存区
存放函数形式参数（函数原型中的参数）、没有static声明的局部变量、函数调用时的现场保护和返回地址等。
这些数据在函数调用开始时分配内存空间，函数结束时释放这些空间。如果一个程序两次调用同一函数，分配给局部变量的内存地址可能是不同的。

在Ｃ语言中，每一个变量和函数都有两个属性：数据类型和储存类别。
数据类型指整型、浮点型、字符型等。
储存类别指的是数据在内存中储存的方式，包括４种：
（１）自动变量（auto)
函数中的局部变量，如果不专门用static声明，均为auto变量，在调用该函数时，系统会自动给这些变量分配内存空间，在函数调用结束时就自动释放这些储存空间。
（２）静态局部变量（static）	例见stic.c
１．用该储存类别声明的变量会在编译时就赋初始值，且在程序运行的整个期间都不释放。
２．如果在定义静态局部变量时没有赋初始值，系统会自动赋０或'\0'，而没有赋初始值的自动局部变量的值是不可确定的。
３．虽然静态局部变量在函数调用结束后仍然存在，但因为它是局部变量，只能被本函数引用。
４．和全局变量相似，尽量不要使用静态局部变量。
（３）寄存器变量（register）
一般情况下，变量的值是存放在内存中的。当程序中用到哪一个变量的值时，由控制器发出指令将内存中该变量的值送到运算器中。如果需要存放，再从运算器将数据送到内存存放。如果有一些变量使用频繁，则存取变量的时间就会很长。为提高执行效率，Ｃ语言允许将局部变量的值存放在CPU的寄存器中，需要时直接从寄存器中取出参加运算，这种变量成为寄存器变量，用register声明。由于现在的计算机速度越来越快，优化的编译系统能够自动识别使用频繁的变量，并将这些变量放在寄存器中，所以实际上并不需要使用register变量，只需要了解就可以。
（４）外部变量（extern）
此关键词用于扩展全局变量（外部变量）的作用域，分为以下几种情况：
１．在一个文件内扩展外部变量的作用域。	例见ex1.c
如果外部变量不在文件的开头定义，其有效的作用范围只在定义处到源文件结束，但出于某种考虑想在定义点前引用该外部变量，此时需要用extern关键字在需要用到该变量的地方声明一下。现在的编译器貌似必须要规定extern变量的类型。
２．将外部变量的作用域扩展到其他文件。
如果一个程序由多个源程序文件组成，在两个文件中都要用到同一个外部变量Num。当两个文件中同时定义Num变量在编译时会出现“重复定义”的错误，此时就要在一个文件中用extern声明。例如下：
--------------------
file1.c
#include <stdio.h>

int A = 3;

int main(void){
	int fun(int);
	fun(A);
}
---------------------
file2.c
extern A

int fun(int A){
	A += 3;
}
---------------------
３．将外部变量的作用域限制在本文件中。
在２的例中，如果file1中全局变量A定义的时候，在前面加上static关键字，则file2的extern无法引用file1中的全局变量，这样的变量称为静态外部变量。在程序设计中，如果已经确定其他文件不需要引用该外部变量，则应该将该外部变量声明为static，以免误用。
