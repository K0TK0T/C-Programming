函数是用来完成一定功能的，所谓函数名就是给该功能取的一个名字。

所有函数都是平行的，不能嵌套定义。函数间可以互相调用，但是不能调用main函数，main函数是系统调用的。

定义函数就是将它的名字、返回值类型、实现功能以及参数的个数和类型告知编译系统。

函数的返回值与它的定义类型保持一致（无论return中返回的是何种类型），对于不带回任何值的函数，定义为void类型。

无参函数的定义
类型名　函数名([void]){...}

有参函数的定义
类型名　函数名(形式参数列表){...}

空函数
void dummy(){}
在设计函数的初期，往往只设计最基本的模块，这时可以在将来准备扩充功能的地方写一个控函数，以该功能命名，以便在今后扩充功能的时候以一个写好的函数代替它。

函数调用
函数名（实参列表）

调用过程
（１）在定义函数中指定的形参，在未出现函数调用的时候，并不占用内存中的储存单元。在发生函数调用时，它被临时分配内存单元。
（２）实参的值传给形参，函数利用形参进行各种运算。
（３）函数通过return语句将函数值带回主函数。
（４）调用结束，形参单元被释放，实参单元仍保持原值不变。

调用声明
（１）如果使用库函数，应在文件开头使用“#include”指令将调用有关库函数时所需用到的信息包含到本文件中来。
（２）如果是调用自定义函数，且该函数的位置在主调函数（即调用它的函数）之后，则应该在主调函数中对它做出声明。声明的作用是把函数名、参数类型、个数等信息通知编译系统，以便在今后调用的时候检查该调用是否合法。
声明的形式为该函数的“函数原型”，即函数的首行，然后在后面加一个分号。函数原型可以省略参数名。例见4cmp.c

数组元素作为实参
和变量作为实参用法一样，且数组元素只能作为实参，不能作为形参，因为形参是在函数被调用时临时分配内存单元的，不可能为一个数组元素单独分配内存单元。

数组名作为参数
用数组元素作为实参时，向形参传递的是数组元素的值，而用数组名作为实参时，向形参传递的是数组首地址。例见avescore.c，avescore2.c
注意事项：
（１）实参数组与形参数组类型应该一致。
（２）在例中，定义average函数时，声明数组大小为５，但实际上，指定其大小是不起任何作用的，因为Ｃ语言编译系统并不检查形参数组大小，只是将实参数组的首地址传给了形参数组名。因此，形参中的score[i]和实参中的score[i]是占用同一地址。
（３）由（２），我们可以在Ｃ语言数组名的调用中省略数组大小。
（４）多维数组名作为参数时只能省略第一维的大小。以二维数组为例，由于在内存中，数组是按行存放的，必须指定其第二维的大小才能确定每一个一维数组大小，所以不能省略列数。例见3p4.c
学习指针后的深入理解
当数组名作为实参时，传进函数中的是数组的首地址，也就是一个指针常量，因此，函数中形参应该是一个指针变量（只有指针变量可以存放地址）。在C语言中，*(a+n)和a[n]是等价的，所以下面的表达都是一个意思：
int main(void){
	void fun(int a[]);
//	void fun(int *a);
	int a[10];
	fun(a);
}
void fun(int a[(10)]){
}
//void fun(int *a){
//}
在函数中，形参a的值是可以改变的。例见rev.c
